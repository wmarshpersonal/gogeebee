// Code generated by "stringer -output=ops_string.go -type=AddrSelector,DataOp,ALUOp,IDUOp,MiscOp -linecomment"; DO NOT EDIT.

package cpu

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AddrZero-0]
	_ = x[AddrHI_plus_C-1]
	_ = x[AddrHI_plus_Z-2]
	_ = x[AddrBC-3]
	_ = x[AddrDE-4]
	_ = x[AddrHL-5]
	_ = x[AddrSP-6]
	_ = x[AddrPC-7]
	_ = x[AddrWZ-8]
}

const _AddrSelector_name = "0x00000xFF00 + C0xFF00 + ZBCDEHLSPPCWZ"

var _AddrSelector_index = [...]uint8{0, 6, 16, 26, 28, 30, 32, 34, 36, 38}

func (i AddrSelector) String() string {
	if i >= AddrSelector(len(_AddrSelector_index)-1) {
		return "AddrSelector(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AddrSelector_name[_AddrSelector_index[i]:_AddrSelector_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReadIR-1]
	_ = x[ReadZ-2]
	_ = x[ReadW-3]
	_ = x[WriteZ-4]
	_ = x[WriteA-5]
	_ = x[WriteR8-6]
	_ = x[WriteALU-7]
	_ = x[Write_Lo_rrstk-8]
	_ = x[Write_Hi_rrstk-9]
	_ = x[WritePCL-10]
	_ = x[WritePCH-11]
	_ = x[WriteSPL-12]
	_ = x[WriteSPH-13]
	_ = x[W_Equals_ALU-14]
}

const _DataOp_name = "IR ←Z ←W ←← Z← A← r← ALU← lo(rrstk)← hi(rrstk)← PCL← PCH← SPL← SPHW ← ALU"

var _DataOp_index = [...]uint8{0, 6, 11, 16, 21, 26, 31, 38, 51, 64, 71, 78, 85, 92, 101}

func (i DataOp) String() string {
	i -= 1
	if i >= DataOp(len(_DataOp_index)-1) {
		return "DataOp(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _DataOp_name[_DataOp_index[i]:_DataOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LD_r_r-1]
	_ = x[LD_A_Z-2]
	_ = x[LD_r_Z-3]
	_ = x[INC_r-4]
	_ = x[DEC_r-5]
	_ = x[INC_Z-6]
	_ = x[DEC_Z-7]
	_ = x[ADD_Z-8]
	_ = x[ADD_r-9]
	_ = x[ADC_Z-10]
	_ = x[ADC_r-11]
	_ = x[SUB_Z-12]
	_ = x[SUB_r-13]
	_ = x[SBC_Z-14]
	_ = x[SBC_r-15]
	_ = x[AND_Z-16]
	_ = x[AND_r-17]
	_ = x[XOR_Z-18]
	_ = x[XOR_r-19]
	_ = x[OR_Z-20]
	_ = x[OR_r-21]
	_ = x[CP_Z-22]
	_ = x[CP_r-23]
	_ = x[RLCA-24]
	_ = x[RLC_Z-25]
	_ = x[RLC_r-26]
	_ = x[RRCA-27]
	_ = x[RRC_Z-28]
	_ = x[RRC_r-29]
	_ = x[RR_Z-30]
	_ = x[RR_r-31]
	_ = x[RLA-32]
	_ = x[RL_Z-33]
	_ = x[RL_r-34]
	_ = x[SLA_Z-35]
	_ = x[SLA_r-36]
	_ = x[SRA_Z-37]
	_ = x[SRA_r-38]
	_ = x[SWAP_Z-39]
	_ = x[SWAP_r-40]
	_ = x[SRL_Z-41]
	_ = x[SRL_r-42]
	_ = x[BIT_Z-43]
	_ = x[BIT_r-44]
	_ = x[RES_Z-45]
	_ = x[RES_r-46]
	_ = x[SET_Z-47]
	_ = x[SET_r-48]
	_ = x[RRA-49]
	_ = x[DAA-50]
	_ = x[CPL-51]
	_ = x[SCF-52]
	_ = x[CCF-53]
	_ = x[Res_Z_Equals_PCL_Plus_ZSigned-54]
	_ = x[L_Equals_lo_HL_plus_rr-55]
	_ = x[H_Equals_hi_HL_plus_rr-56]
	_ = x[L_Equals_lo_SPL_Plus_ZSigned-57]
	_ = x[H_Equals_hi_SPL_Plus_ZSigned-58]
	_ = x[res_Z_adj_Equals_SP_Plus_ZSigned-59]
	_ = x[W_Equals_res-60]
}

const _ALUOp_name = "r ← r'A ← Zr ← Zr ← r + 1r ← r - 1Z ← Z + 1Z ← Z - 1A ← A + ZA ← A + rA ← A +c ZA ← A +c rA ← A - ZA ← A - rA ← A -c ZA ← A -c rA ← A and ZA ← A and rA ← A xor ZA ← A xor rA ← A or ZA ← A or rA ← A cp ZA ← A cp rA ← rlc Ares ← rlc Zr ← rlc rA ← rrc Ares ← rrc Zr ← rrc rres ← rr Zr ← rr rA ← rl Ares ← rl Zr ← rl rres ← sla Zr ← sla rres ← sra Zr ← sra rres ← swap Zr ← swap rres ← srl Zr ← srl rbit Zbit rres ← res Zr ← res rres ← set Zr ← set rA ← rr ADAAA ← not Acf ← 1cf ← not cfres, Z ← PCL +- ZL ← lo(HL + rr)H ← hi(HL + rr)L ← lo(SP +- Z)H ← hi(SP +- Z)res, Z ← SP +- ZW ← res"

var _ALUOp_index = [...]uint16{0, 8, 15, 22, 33, 44, 55, 66, 77, 88, 100, 112, 123, 134, 146, 158, 171, 184, 197, 210, 222, 234, 246, 258, 269, 282, 293, 304, 317, 328, 340, 350, 360, 372, 382, 395, 406, 419, 430, 444, 456, 469, 480, 485, 490, 503, 514, 527, 538, 548, 551, 562, 570, 583, 602, 619, 636, 653, 670, 688, 697}

func (i ALUOp) String() string {
	i -= 1
	if i >= ALUOp(len(_ALUOp_index)-1) {
		return "ALUOp(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ALUOp_name[_ALUOp_index[i]:_ALUOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Inc-1]
	_ = x[Dec-2]
	_ = x[Set_SP-3]
	_ = x[IncSetPC-4]
	_ = x[IRQ-5]
}

const _IDUOp_name = "++--SP ←IncSetPCIRQ"

var _IDUOp_index = [...]uint8{0, 2, 4, 10, 18, 21}

func (i IDUOp) String() string {
	i -= 1
	if i >= IDUOp(len(_IDUOp_index)-1) {
		return "IDUOp(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _IDUOp_name[_IDUOp_index[i]:_IDUOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PC_Equals_WZ-1]
	_ = x[SP_Equals_WZ-2]
	_ = x[PC_Equals_WZ_Set_IME-3]
	_ = x[PC_Equals_Addr-4]
	_ = x[RR_Equals_WZ-5]
	_ = x[RRstk_Equals_WZ-6]
	_ = x[Set_IME-7]
	_ = x[Reset_IME-8]
	_ = x[Panic-9]
	_ = x[Set_CB-10]
	_ = x[Halt-11]
	_ = x[Cond-12]
}

const _MiscOp_name = "PC ← WZSP ← WZPC ← WZ, IME ← 1PC ← addrrr ← WZrrstk ← WZIME ← 1IME ← 0PANICCB ← 1HALTCOND"

var _MiscOp_index = [...]uint8{0, 9, 18, 38, 49, 58, 70, 79, 88, 93, 101, 105, 109}

func (i MiscOp) String() string {
	i -= 1
	if i >= MiscOp(len(_MiscOp_index)-1) {
		return "MiscOp(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MiscOp_name[_MiscOp_index[i]:_MiscOp_index[i+1]]
}
