// Code generated by "stringer -type MBCType,Capabilities -linecomment -output header_string.go"; DO NOT EDIT.

package cartridge

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ROMOnly-0]
	_ = x[MBC1-1]
	_ = x[MBC1_RAM-2]
	_ = x[MBC1_RAM_Battery-3]
	_ = x[MBC2-5]
	_ = x[MBC2_Battery-6]
	_ = x[Unknown_ROM_RAM-8]
	_ = x[Unknown_ROM_RAM_Battery-9]
	_ = x[MMM01-11]
	_ = x[MMM01_RAM-12]
	_ = x[MMM01_RAM_Battery-13]
	_ = x[MBC3_Timer_Battery-15]
	_ = x[MBC3_Timer_RAM_Battery-16]
	_ = x[MBC3-17]
	_ = x[MBC3_RAM-18]
	_ = x[MBC3_RAM_Battery-19]
	_ = x[MBC5-25]
	_ = x[MBC5_RAM-26]
	_ = x[MBC5_RAM_Battery-27]
	_ = x[MBC5_Rumble-28]
	_ = x[MBC5_Rumble_RAM-29]
	_ = x[MBC_Rumble_RAM_Battery-30]
	_ = x[MBC6-32]
	_ = x[MBC7_Sensor_Rumble_RAM_Battery-34]
	_ = x[PocketCamera-252]
	_ = x[Bandai_Tama5-253]
	_ = x[HuC3-254]
	_ = x[HuC1_RAM_Battery-255]
}

const (
	_MBCType_name_0 = "ROM ONLYMBC1MBC1+RAMMBC1+RAM+BATTERY"
	_MBCType_name_1 = "MBC2MBC2+BATTERY"
	_MBCType_name_2 = "??? ROM+RAM 1??? ROM+RAM+BATTERY 1"
	_MBCType_name_3 = "MMM01MMM01+RAMMMM01+RAM+BATTERY"
	_MBCType_name_4 = "MBC3+TIMER+BATTERYMBC3+TIMER+RAM+BATTERY 2MBC3MBC3+RAM 2MBC3+RAM+BATTERY 2"
	_MBCType_name_5 = "MBC5MBC5+RAMMBC5+RAM+BATTERYMBC5+RUMBLEMBC5+RUMBLE+RAMMBC5+RUMBLE+RAM+BATTERY"
	_MBCType_name_6 = "MBC6"
	_MBCType_name_7 = "MBC7+SENSOR+RUMBLE+RAM+BATTERY"
	_MBCType_name_8 = "POCKET CAMERABANDAI TAMA5HuC3HuC1+RAM+BATTERY"
)

var (
	_MBCType_index_0 = [...]uint8{0, 8, 12, 20, 36}
	_MBCType_index_1 = [...]uint8{0, 4, 16}
	_MBCType_index_2 = [...]uint8{0, 13, 34}
	_MBCType_index_3 = [...]uint8{0, 5, 14, 31}
	_MBCType_index_4 = [...]uint8{0, 18, 42, 46, 56, 74}
	_MBCType_index_5 = [...]uint8{0, 4, 12, 28, 39, 54, 77}
	_MBCType_index_8 = [...]uint8{0, 13, 25, 29, 45}
)

func (i MBCType) String() string {
	switch {
	case i <= 3:
		return _MBCType_name_0[_MBCType_index_0[i]:_MBCType_index_0[i+1]]
	case 5 <= i && i <= 6:
		i -= 5
		return _MBCType_name_1[_MBCType_index_1[i]:_MBCType_index_1[i+1]]
	case 8 <= i && i <= 9:
		i -= 8
		return _MBCType_name_2[_MBCType_index_2[i]:_MBCType_index_2[i+1]]
	case 11 <= i && i <= 13:
		i -= 11
		return _MBCType_name_3[_MBCType_index_3[i]:_MBCType_index_3[i+1]]
	case 15 <= i && i <= 19:
		i -= 15
		return _MBCType_name_4[_MBCType_index_4[i]:_MBCType_index_4[i+1]]
	case 25 <= i && i <= 30:
		i -= 25
		return _MBCType_name_5[_MBCType_index_5[i]:_MBCType_index_5[i+1]]
	case i == 32:
		return _MBCType_name_6
	case i == 34:
		return _MBCType_name_7
	case 252 <= i && i <= 255:
		i -= 252
		return _MBCType_name_8[_MBCType_index_8[i]:_MBCType_index_8[i+1]]
	default:
		return "MBCType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RAM-1]
	_ = x[Battery-2]
	_ = x[Rumble-4]
	_ = x[Sensor-8]
}

const (
	_Capabilities_name_0 = "RAMBattery"
	_Capabilities_name_1 = "Rumble"
	_Capabilities_name_2 = "Sensor"
)

var (
	_Capabilities_index_0 = [...]uint8{0, 3, 10}
)

func (i Capabilities) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _Capabilities_name_0[_Capabilities_index_0[i]:_Capabilities_index_0[i+1]]
	case i == 4:
		return _Capabilities_name_1
	case i == 8:
		return _Capabilities_name_2
	default:
		return "Capabilities(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
